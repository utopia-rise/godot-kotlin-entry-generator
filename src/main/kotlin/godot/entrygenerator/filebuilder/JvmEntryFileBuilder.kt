package godot.entrygenerator.filebuilder

import com.squareup.kotlinpoet.*
import godot.entrygenerator.EntryGenerationType
import godot.entrygenerator.extension.EntryGeneratorExtension
import godot.entrygenerator.generator.clazz.ClassRegistrationGeneratorProvider
import godot.entrygenerator.model.ClassWithMembers
import org.jetbrains.kotlin.cli.common.messages.MessageCollector
import org.jetbrains.kotlin.resolve.BindingContext

class JvmEntryFileBuilder(bindingContext: BindingContext) : EntryFileBuilder(bindingContext) {

    override fun registerClassesWithMembers(classesWithMembers: Set<ClassWithMembers>, extensionToDescriptors: Map<EntryGeneratorExtension, Set<ClassWithMembers>>, messageCollector: MessageCollector): EntryFileBuilder {
        val entryClassSpec = TypeSpec
            .classBuilder(ClassName("godot", "Entry"))
            .superclass(ClassName("godot.runtime", "Entry"))

        val initFunctionSpec = FunSpec
            .builder("init")
            .receiver(ClassName("godot.runtime.Entry", "Context"))
            .addModifiers(KModifier.OVERRIDE)

        val initEngineTypesFunSpec = FunSpec
            .builder("initEngineTypes")
            .receiver(ClassName("godot.runtime.Entry", "Context"))
            .addModifiers(KModifier.OVERRIDE)

        val classRegistryControlFlow = initFunctionSpec
            .beginControlFlow("with(registry)Â·{") //START: with registry

        val extensionHelperObjectSpec = getExtensionHelperObjectSpec(extensionToDescriptors, classesWithMembers, messageCollector)

        ClassRegistrationGeneratorProvider
            .provideClassRegistrationProvider(EntryGenerationType.JVM)
            .registerClasses(classesWithMembers, classRegistryControlFlow, bindingContext, messageCollector, extensionToDescriptors, extensionHelperObjectSpec)

        initEngineTypesFunSpec.addStatement("%M()", MemberName("godot", "registerVariantMapping"))
        initEngineTypesFunSpec.addStatement("%M()", MemberName("godot", "registerEngineTypes"))
        initEngineTypesFunSpec.addStatement("%M()", MemberName("godot", "registerEngineTypeMethods"))

        classRegistryControlFlow.endControlFlow() //END: with registry

        entryClassSpec.addFunction(initFunctionSpec.build())
        entryClassSpec.addFunction(initEngineTypesFunSpec.build())
        entryFileSpec.addType(entryClassSpec.build())

        extensionHelperObjectSpec?.let { entryFileSpec.addType(it.build()) }

        extensionToDescriptors.forEach { (extension, container) ->
            //TODO: uncomment once kotlin poet supports comments to be places on any line and not just at the top for fileSpecs
//            entryFileSpec.members.add(
//                CodeBlock
//                    .builder()
//                    .add("//================EXTENSION BLOCK================")
//                    .add("//START: Generated by extension: ${extension.provideExtensionName()}")
//                    .add("//Extension entry class: ${extension::class.qualifiedName}")
//            )
            extension.writeToEntryFileRoot(entryFileSpec, container, messageCollector)
            //TODO: uncomment once kotlin poet supports comments to be places on any line and not just at the top for fileSpecs
//            entryFileSpec.members.add(
//                CodeBlock
//                    .builder()
//                    .add("//END: Generated by extension: ${extension.provideExtensionName()}")
//                    .add("//Extension entry class: ${extension::class.qualifiedName}")
//                    .add("//================EXTENSION BLOCK================")
//            )
        }
        return this
    }
}
